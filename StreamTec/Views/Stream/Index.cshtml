@model Dictionary<string, Dictionary<string, List<Stream>>>
@inject IHttpContextAccessor HttpContextAccessor

@{
ViewData["Title"] = "Timetable";
IEnumerable<Stream> streams = ViewData["Streams"] as IEnumerable<Stream>;
}

<!-- ======= Main Content ======= -->
<section class="inner-page">
    <div class="container-fluid">
        <div class="row justify-content-around">
            <!-- ======= Course List Sidebar ======= -->
            <nav class="col-md-2 marginGap d-none d-md-block bg-light sidebar">
                <ul class="flex-column list-unstyled">
                    <h4>Courses: </h4>
			        <li class="nav-item">
				        <select class="form-select form-select-sm aria-label form-select-sm example my-1" onchange="displayMajorCourses(this)">
					        <option disabled selected>Select a major</option>
					        @foreach (var major in Model)
					        {
						        <option value="@major.Key">@major.Key</option>
					        }
				        </select>
			        </li>	
			        <li>
				        <div class="js-course-selection"></div>
			        </li>
			        <li>
				        <button id="reset-btn" class="btn btn-danger w-100 my-2">Unselect</button>
			        </li>
			        <li>
				        <button id="btn" class="btn btn-success w-100">Get Streams</button>
			        </li>
		        </ul>
            </nav><!-- End Course List Sidebar -->
            <!-- ======= Timetable ======= -->
           <nav class="py-2 col-lg-10 text-align-center">
            <div class="timetable grid">
              
              <div class="timeline justify-content-center">
                        <div class="badgeLeftCol time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap spacer"></div>
                <div class="time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap">8:00</div>
                <div class="time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap">9:00</div>
                <div class="time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap">10:00</div>
                <div class="time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap">11:00</div>
                <div class="time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap">12:00</div>
                <div class="time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap">13:00</div>
                <div class="time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap">14:00</div>
                <div class="time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap">15:00</div>
                <div class="time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap">16:00</div>
                <div class="time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap">17:00</div>
                <div class="time-marker fw-bold ml-3 badgeLeftCol bg-secondary text-wrap">18:00</div>
              </div>

              <div class="days events">
                <div class="day mon">
                            <div class="date badge bg-secondary text-wrap align-items-center">
                    <p class="text-white">Monday</p>
                  </div>
                  <div class="events mon-events">
                  </div>
                </div>
                <div class="day tues">
                            <div class="date badge bg-secondary text-wrap align-items-center">
                    <p class="text-white">Tuesday</p>
                  </div>
                  <div class="events tues-events">
                  </div>
                </div>
                <div class="day wed">
                            <div class="date badgeWednesday bg-secondary text-wrap align-items-center">
                    <p class="text-white">Wednesday</p>
                  </div>
                  <div class="events wed-events">
                  </div>
                </div>
                <div class="day thurs">
                            <div class="date badge bg-secondary text-wrap align-items-center">
                    <p class="text-white">Thursday</p>
                  </div>
                  <div class="events thurs-events">
                  </div>
                </div>
                <div class="day fri">
                            <div class="date badgeFriday bg-secondary text-wrap align-items-center">
                    <p class="text-white">Friday</p>
                  </div>
                  <div class="events fri-events">
                  </div>
                </div>
              </div>
            </div>
                <button id="submit-btn" class="btnSubmit btn-primary w-25 text-white">Submit Timetable</button>
            </nav><!-- End Timetable-->
        </div>
    </div>
</section><!-- End Main Content -->

<script>
let collection = @Json.Serialize(Model); // JSON File contains the streams data from StreamController/Index Action
let courses = []; // Array of courses
let submitCourses = []; // Array of submitted courses

const courseSelection = document.querySelector(".js-course-selection"),
    submitBtn = document.querySelector('#submit-btn'),
    resetBtn = document.querySelector('#reset-btn'),
    btn = document.querySelector('#btn'),
    mondayEvents = document.querySelector(".mon-events"),
    tuesdayEvents = document.querySelector(".tues-events"),
    wednesdayEvents = document.querySelector(".wed-events"),
    thursdayEvents = document.querySelector(".thurs-events"),
    fridayEvents = document.querySelector(".fri-events"),
    studentId = document.querySelector(".student-id").innerText;

// Finds the selected stream's radio button
submitBtn.addEventListener('click', (event) => {
    let radioBtnsByDays = []; 
    let selectedStreamCodes = [];

    var mondayRadioBtns = tuesdayEvents.querySelectorAll('input[type="radio"]:checked'),
     tuesdayRadioBtns = tuesdayEvents.querySelectorAll('input[type="radio"]:checked'),
     wednesdayRadioBtns = wednesdayEvents.querySelectorAll('input[type="radio"]:checked'),
     thursdayRadioBtns = thursdayEvents.querySelectorAll('input[type="radio"]:checked'),
     fridayRadioBtns = fridayEvents.querySelectorAll('input[type="radio"]:checked');

    radioBtnsByDays.push(mondayRadioBtns, tuesdayRadioBtns, wednesdayRadioBtns, thursdayRadioBtns, fridayRadioBtns);

    validateClash(radioBtnsByDays);
});

// Clear Selected course's checkboxes
resetBtn.addEventListener('click', (event) => {
    var checkboxes = courseSelection.querySelectorAll("input");

    // Change all checkboxes checked status to false
    for (var checkbox of checkboxes) {
        checkbox.checked = false;
    }
});

// Clear Timetable 
btn.addEventListener('click', (event) => {
	let checkboxes = document.querySelectorAll('input:checked');
	let selectedCourses = [];

    cleanTimetable();

    // Get Course ID
	checkboxes.forEach((checkbox) => {
        var text = checkbox.nextElementSibling.innerText;
		selectedCourses.push(text);		
	});

    submitCourses.length = 0;

    // Push streams related selected courses
	for (const [major, course] of Object.entries(courses)) {
        for (const [key, streams] of Object.entries(course)) {
            if (selectedCourses.includes(key)){
                for (const [key, stream] of Object.entries(streams)){
                    submitCourses.push(stream);
                }
            }
		}
	}
    displayTimetable(submitCourses);
});

// Send an acknowledge message if two streams clash
function validateClash(radioBtnsByDays) {
    var hasClash = false;

    for (const radioBtns of radioBtnsByDays) {

        for (var i = 0; i < radioBtns.length - 1; i++) {
            var stream1 = radioBtns[i],
                streamValueArr = radioBtns[i].value.split(','),
                stream1Code = streamValueArr[0],
                stream1StartTime = streamValueArr[1],
                stream1EndTime = streamValueArr[2];

            for (var j = i + 1; j < radioBtns.length; j++) {
                var stream2 = radioBtns[j],
                streamValueArr = radioBtns[j].value.split(','),
                stream2Code = streamValueArr[0],
                stream2StartTime = streamValueArr[1],
                stream2EndTime = streamValueArr[2];

                if ((stream1StartTime < stream2EndTime && stream1StartTime >= stream2StartTime) || 
                    (stream2StartTime < stream1EndTime && stream2StartTime > stream1StartTime) || 
                    (stream1StartTime == stream2StartTime && stream1EndTime == stream2EndTime)) {

                    hasClash = true;
                    console.log(hasClash);
                }
                else {
                    console.log("No clashes");
                }
            }
        }
    }

    // Create alert if we found any clash
    if (hasClash) {
        if (confirm('We found stream clash(es)\nAre you sure you want to submit this timetable?')) {
            pushSelectedStreams();
        } else {
            console.log("Do nothing and user acknowledged the clashes.")
        }
    } else {
        if (confirm('There are no clashes\nAre you sure you want to submit this timetable?')) {
            pushSelectedStreams();
        } else {
            console.log("Do nothing")
        }
    }
};

// Send selected streams to actions in HomeController to update database
function pushSelectedStreams() {
    var selectedStreamCodes = [];
    var timetable = document.querySelector('.timetable');
    var selectedStreams = timetable.querySelectorAll('input[type="radio"]:checked');

    // Extract course IDs
    for (var stream of selectedStreams){
        var streamValueArr = stream.value.split(','),
            streamCode = streamValueArr[0];

        selectedStreamCodes.push(streamCode);
    }

    // Validate the submitted timetable is not null
    if (selectedStreamCodes.length == 0){
        if (confirm('None of streams selected.')) {
            return;
        } else {
            return;
        }
    }

    // Send student ID and a list of selected streams to SubmitTimetable action in HomeController
    $.post('/Home/SubmitTimetable', { studentId: studentId, completedStreamList: selectedStreamCodes },
        function(data) {
            if (data.result != null && data.result != undefined) {
                alert(data.result);
            }
    })

    // Send student ID and a list of selected streams to SubmitTimetable action in HomeController
    $.post('/Home/SendEmail', { studentId: studentId, completedStreamList: selectedStreamCodes },
        function(data) {
            if (data.result != null && data.result != undefined) {
                alert(data.result);
            }
    })

    window.location.href = '@Url.Action("AfterSubmit", "Home")';
};

// Set colours for different courses
function colorPicker(streamID) {

    let checkboxes = document.querySelectorAll('input:checked');
    let selectedCourses = [];
    checkboxes.forEach((checkbox) => {
        var text = checkbox.nextElementSibling.innerText;
        selectedCourses.push(text);
    });

    if (streamID.includes(selectedCourses[0]) === true) {
        return 'first';
    }
    else if (streamID.includes(selectedCourses[1]) === true) {
        return 'second';
    }
    else if (streamID.includes(selectedCourses[2]) === true) {
        return 'third';
    }
    else if (streamID.includes(selectedCourses[3]) === true) {
        return 'fourth';
    }
};

// Create html elements based on the streams data of SubmitCourses array
function displayTimetable(submitCourses) {
    cleanTimetable();

    for (var i = 0; i < submitCourses.length; i++){
        const div = document.createElement("div");
        const streamSpan = document.createElement("p");
        const classroomSpan = document.createElement("span");
        const capacitySpan = document.createElement("span");
        const input = document.createElement("input");
        
        var streamID = submitCourses[i]['streamID'];

        streamSpan.innerText = streamID;
        classroomSpan.innerText = 'Room: ' + submitCourses[i]['room'] + ' / ';
        capacitySpan.innerText = 'Capa: ' + submitCourses[i]['capacity'];

        if (submitCourses[i]['capacity'] == 0) {
            input.disabled = true;
        }
        input.type = "radio";
        input.name = streamID.slice(0, -3);
        input.value = submitCourses[i]['streamID'] + ", " + submitCourses[i]['startTime'] + ", " + submitCourses[i]['endTime'];

        div.appendChild(streamSpan);
        div.appendChild(classroomSpan);
        div.appendChild(capacitySpan);
        div.appendChild(input);

            div.classList.add('event', 'start-' + submitCourses[i]['startTime'], 'end-' + submitCourses[i]['endTime'], colorPicker(submitCourses[i]['streamID']), 'text-white')

        switch (submitCourses[i]['day']) {
            case 'Monday':
                mondayEvents.appendChild(div);
                break;
            case 'Tuesday':
                tuesdayEvents.appendChild(div);
                break;
            case 'Wednesday':
                wednesdayEvents.appendChild(div);
                break;
            case 'Thursday':
                thursdayEvents.appendChild(div);
                break;
            case 'Friday':
                fridayEvents.appendChild(div);
        }
    }
};

// Clean childrent of each day's div
function cleanTimetable() {
    mondayEvents.replaceChildren();
    tuesdayEvents.replaceChildren();
    wednesdayEvents.replaceChildren();
    thursdayEvents.replaceChildren();
    fridayEvents.replaceChildren();
};

// Limit the courses selection
function limitCheckBoxSelection(checkboxgroup, limit) {
	for (var i = 0; i < checkboxgroup.length; i++) {
        checkboxgroup[i].addEventListener('click', function() {
            var checkedcount = 0;

            for (var i = 0; i < checkboxgroup.length; i++) {

                if (checkboxgroup[i].checked && checkboxgroup[i].classList.contains("45credits")) {
                    checkedcount += 3;
                } else if (checkboxgroup[i].checked) {
                    checkedcount += 1;
                }

                if (checkedcount > limit){
                    this.checked = false;
                    checkedcount -= 1;
                    alert("You can only select a maximum of 60 credits");
                }
            }
        })
	}
}

// Display courses based on the major sent from dropdown box
function displayMajorCourses(selectMajor) {
    let majorCourseList = collection[selectMajor.value];
    let majorCourses = [];
    const courseObjs = document.getElementsByClassName("courseObj");

    for (const [key, value] of Object.entries(majorCourseList)) {
        majorCourses.push(key);
    } 


    for (const courseObj of courseObjs) {
        let courseID = courseObj.lastElementChild.innerHTML;
        courseObj.style.display = "none";

        if (majorCourses.includes(courseID)) {
            courseObj.style.display = "block";
        }
    }   
}

// Create checkbox for every courses 
function createCourseCheckbox(course) {
    const li = document.createElement("li");
    const label = document.createElement("label");
    const checkbox = document.createElement("input");

    if (course == "IT-7510") {
        checkbox.classList.add("45credits");
    }
    label.innerText = course;
    checkbox.type = "checkbox";
    checkbox.classList.add("mx-1");
    li.appendChild(checkbox);
    li.appendChild(label);
    li.classList.add("courseObj");
    courseSelection.appendChild(li);
};

// Load major, course name and streams data from JSON file.
function loadAllCourse() {
    for (var major in collection) {
        var courseList = collection[major];
        courses[major] = courseList;

        for (const [key, value] of Object.entries(courseList)) {
            createCourseCheckbox(key);
        } 
    }
};

window.onload = function() {
    loadAllCourse();
    limitCheckBoxSelection(courseSelection.querySelectorAll("input"), 4);
};

</script>

