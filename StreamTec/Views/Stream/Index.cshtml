@model Dictionary<string, Dictionary<string, List<Stream>>>

@{
    ViewData["Title"] = "Timetable";
}

<!-- ======= Breadcrumbs ======= -->
<section class="breadcrumbs">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center">
            <h2>Stream Timetable</h2>
        </div>
    </div>
</section><!-- End Breadcrumbs -->

<!-- ======= Main Content ======= -->
<section class="inner-page">
    <div class="container" >
        <nav class="sidebar card py-2 mb-4 col-2">
			<ul class="nav flex-column" id="nav_accordion">
				<li class="nav-item">
					<select class="form-select form-select-sm" aria-label=".form-select-sm example" onchange="displayMajorCourses(this)">
					  <option selected>Please select a major</option>
						@foreach(var major in Model){
							<option value="@major.Key">@major.Key</option>
					    }
					</select>
				</li>
                <li class="nav-item">
                    <div class="js-course-selection">
                    </div>
                </li>
                <li>
                    <span  id="course-list"></span>
                </li>
                <li>
                    <button id="btn">Help me</button>
                </li>
			</ul>
        </nav>
    </div>
</section><!-- End Main Content -->

<span id="jsonfile"></span>



<script>

let collection = @Json.Serialize(Model);
let courses = [];
let submitCourses = [];
const courseSelection = document.querySelector(".js-course-selection");
const btn = document.querySelector('#btn');

btn.addEventListener('click', (event) => {
	let checkboxes = document.querySelectorAll('input:checked');
	let selectedCourses = [];
	checkboxes.forEach((checkbox) => {
		var text = checkbox.previousElementSibling.innerText;
		selectedCourses.push(text);		
	});

    submitCourses.length = 0;

	for (const [key, course] of Object.entries(courses)) {
        for (const [key, value] of Object.entries(course)) {
            if (selectedCourses.includes(key)){
                const submitcourse = { key, value };
                submitCourses.push(submitcourse);
            }
		}
	}
    console.log(submitCourses);
    //localStorage.clear();
    //localStorage.setItem("SubmitCourses", JSON.stringify(submitCourses));
});

function displayTimetable() {

};

function displayMajorCourses(selectMajor) {
    let majorCourseList = collection[selectMajor.value];
    let majorCourses = [];
    const courseObjs = document.getElementsByClassName("courseObj");

    for (const [key, value] of Object.entries(majorCourseList)) {
        majorCourses.push(key);
    } 

    for (const courseObj of courseObjs) {
        let courseID = courseObj.firstElementChild.innerHTML;
        courseObj.style.display = "none";

        if (majorCourses.includes(courseID)) {
            courseObj.style.display = "block";
        }
    }   
}

function createCourseCheckbox(course) {
    const li = document.createElement("li");
    const label = document.createElement("label");
    const checkbox = document.createElement("input");
    label.innerText = course;
    checkbox.type = "checkbox";
    li.appendChild(label);
    li.appendChild(checkbox);
    li.classList.add("courseObj")
    courseSelection.appendChild(li);
}

function loadAllCourse() {
    for (var major in collection) {
        var courseList = collection[major];
        courses[major] = courseList;

        for (const [key, value] of Object.entries(courseList)) {
            createCourseCheckbox(key);
        } 
    }
};

window.onload = function() {
    loadAllCourse();
};


</script>
