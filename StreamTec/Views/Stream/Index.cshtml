@model Dictionary<string, Dictionary<string, List<Stream>>>

@{
ViewData["Title"] = "Timetable";
IEnumerable<Stream> streams = ViewData["Streams"] as IEnumerable<Stream>;
}

<!-- ======= Breadcrumbs ======= -->
<section class="breadcrumbs">
<div class="container">

	<div class="d-flex justify-content-between align-items-center">
		<h2>Stream Timetable</h2>
	</div>

</div>
</section><!-- End Breadcrumbs -->

<!-- ======= Main Content ======= -->
<section class="inner-page">
    <div class="container-fluid">
        <div class="row pt-xxl-3">
	        <nav class="sidebar card py-2 mb-4 col-1">
		        <ul class="nav flex-column" id="nav_accordion">
			        <li class="nav-item">
				        <select class="form-select form-select-sm" aria-label=".form-select-sm example" onchange="displayMajorCourses(this)">
					        <option selected>Please select a major</option>
					        @foreach (var major in Model)
					        {
						        <option value="@major.Key">@major.Key</option>
					        }
				        </select>
			        </li>	
			        <li>
				        <div class="js-course-selection"></div>
			        </li>
			        <li>
				        <button id="reset-btn">Unchecked All</button>
			        </li>
			        <li>
				        <button id="btn">Get Selected Courses</button>
			        </li>
		        </ul>
	        </nav>
            
            <div class="timetable col-10 grid">
              
              <div class="timeline">
                <div class="spacer"></div>
                <div class="time-marker">8:00</div>
                <div class="time-marker">9:00</div>
                <div class="time-marker">10:00</div>
                <div class="time-marker">11:00</div>
                <div class="time-marker">12:00</div>
                <div class="time-marker">13:00</div>
                <div class="time-marker">14:00</div>
                <div class="time-marker">15:00</div>
                <div class="time-marker">16:00</div>
                <div class="time-marker">17:00</div>
                <div class="time-marker">18:00</div>
              </div>
              <div class="days">
                
                <div class="day mon">
                  <div class="date">
                    <p class="date-day">Mon</p>
                  </div>
                  <div class="events mon-events">
                  </div>
                </div>
                <div class="day tues">
                  <div class="date">
                    <p class="date-day">Tues</p>
                  </div>
                  <div class="events tues-events">
                  </div>
                </div>
                <div class="day wed">
                  <div class="date">
                    <p class="date-day">Wed</p>
                  </div>
                  <div class="events wed-events">
                  </div>
                </div>
                <div class="day thurs">
                  <div class="date">
                    <p class="date-day">Thurs</p>
                  </div>
                  <div class="events thurs-events">
                  </div>
                </div>
                <div class="day fri">
                  <div class="date">
                    <p class="date-day">Fri</p>
                  </div>
                  <div class="events fri-events">
                  </div>
                </div>
              </div>
              <button id="submit-btn">Submit Timetable</button>
            </div><!-- End Timetable-->
        </div>
    </div>
</section><!-- End Main Content -->

<script>
let collection = @Json.Serialize(Model);
let courses = [];
let submitCourses = [];
const courseSelection = document.querySelector(".js-course-selection"),
    submitBtn = document.querySelector('#submit-btn'),
    resetBtn = document.querySelector('#reset-btn'),
    btn = document.querySelector('#btn'),
    mondayEvents = document.querySelector(".mon-events"),
    tuesdayEvents = document.querySelector(".tues-events"),
    wednesdayEvents = document.querySelector(".wed-events"),
    thursdayEvents = document.querySelector(".thurs-events"),
    fridayEvents = document.querySelector(".fri-events");

submitBtn.addEventListener('click', (event) => {
    var mondayRadioBtns = thursdayEvents.querySelectorAll('input[type="radio"]:checked');
    //for (var radiobtn of mondayRadioBtns) {
    //    var streamValueArr = radiobtn.value.split(',');
    //    var streamStartTime = streamValueArr[1];
    //    var streamEndTime = streamValueArr[2];

    //    console.log(streamStartTime, streamEndTime);

        
    //}

    for (var i = 0; i < mondayRadioBtns.length - 1; i++) {
        var stream1 = mondayRadioBtns[i],
            streamValueArr = mondayRadioBtns[i].value.split(','),
            stream1StartTime = streamValueArr[1],
            stream1EndTime = streamValueArr[2];

        for (var j = i + 1; j < mondayRadioBtns.length; j++) {
            var stream2 = mondayRadioBtns[j],
            streamValueArr = mondayRadioBtns[j].value.split(','),
            stream2StartTime = streamValueArr[1],
            stream2EndTime = streamValueArr[2];

            //if ((stream1EndTime >= stream2StartTime && stream1StartTime <= stream2StartTime) || (stream1StartTime >= stream2EndTime && stream1EndTime >= stream2StartTime)) {
            //    console.log("There is clash");
            //}
            if ((stream1StartTime < stream2EndTime && stream1StartTime >= stream2StartTime) || 
                (stream2StartTime < stream1EndTime && stream2StartTime > stream1StartTime) || 
                (stream1StartTime == stream2StartTime && stream1EndTime == stream2EndTime)) {
                    console.log("There is clash");
            }
            else {
                console.log("No clashes");
            }
        }
    }

});

resetBtn.addEventListener('click', (event) => {
    var checkboxes = courseSelection.querySelectorAll("input");

    for (var checkbox of checkboxes) {
        checkbox.checked = false;
    }
});

btn.addEventListener('click', (event) => {
	let checkboxes = document.querySelectorAll('input:checked');
	let selectedCourses = [];
	checkboxes.forEach((checkbox) => {
		var text = checkbox.previousElementSibling.innerText;
		selectedCourses.push(text);		
	});


function displayTimetable(submitCourses) {
    cleanTimetable();
    console.log(submitCourses);

    for (var i = 0; i < submitCourses.length; i++){
        const div = document.createElement("div");
        const streamSpan = document.createElement("span");
        const classroomSpan = document.createElement("span");
        const capacitySpan = document.createElement("span");
        const input = document.createElement("input");
        
        var streamID = submitCourses[i]['streamID'];

        streamSpan.innerText = streamID;
        classroomSpan.innerText = submitCourses[i]['room'];
        capacitySpan.innerText = submitCourses[i]['capacity'];

        input.type = "radio";
        input.name = streamID.slice(0, -3);
        input.value = submitCourses[i]['streamID'] + ", " + submitCourses[i]['startTime'] + ", " + submitCourses[i]['endTime'];

        div.appendChild(streamSpan);
        div.appendChild(classroomSpan);
        div.appendChild(capacitySpan);
        div.appendChild(input);

        div.classList.add('event', 'start-' + submitCourses[i]['startTime'], 'end-' + submitCourses[i]['endTime'])

        switch (submitCourses[i]['day']) {
            case 'Monday':
                mondayEvents.appendChild(div);
                break;
            case 'Tuesday':
                tuesdayEvents.appendChild(div);
                break;
            case 'Wednesday':
                wednesdayEvents.appendChild(div);
                break;
            case 'Thursday':
                thursdayEvents.appendChild(div);
                break;
            case 'Friday':
                fridayEvents.appendChild(div);
        }
    }
};

function cleanTimetable() {
    mondayEvents.replaceChildren();
    tuesdayEvents.replaceChildren();
    wednesdayEvents.replaceChildren();
    thursdayEvents.replaceChildren();
    fridayEvents.replaceChildren();
};

function limitCheckBoxSelection(checkboxgroup, limit) {
	for (var i = 0; i < checkboxgroup.length; i++) {
        checkboxgroup[i].addEventListener('click', function() {
            var checkedcount = 0;

            for (var i = 0; i < checkboxgroup.length; i++) {

                if (checkboxgroup[i].checked && checkboxgroup[i].classList.contains("45credits")) {
                    checkedcount += 3;
                } else if (checkboxgroup[i].checked) {
                    checkedcount += 1;
                }

                if (checkedcount > limit){
                    this.checked = false;
                    checkedcount -= 1;
                    alert("You can only select a maximum of 60 credits");
                }
            }
        })
	}
}

function displayMajorCourses(selectMajor) {
    let majorCourseList = collection[selectMajor.value];
    let majorCourses = [];
    const courseObjs = document.getElementsByClassName("courseObj");

    for (const [key, value] of Object.entries(majorCourseList)) {
        majorCourses.push(key);
    } 

    for (const courseObj of courseObjs) {
        let courseID = courseObj.firstElementChild.innerHTML;
        courseObj.style.display = "none";

        if (majorCourses.includes(courseID)) {
            courseObj.style.display = "block";
        }
    }   
}

function createCourseCheckbox(course) {
    const li = document.createElement("li");
    const label = document.createElement("label");
    const checkbox = document.createElement("input");

    if (course == "IT-7510") {
        checkbox.classList.add("45credits");
    }
    label.innerText = course;
    checkbox.type = "checkbox";
    li.appendChild(label);
    li.appendChild(checkbox);
    li.classList.add("courseObj")
    courseSelection.appendChild(li);
};

function loadAllCourse() {
    for (var major in collection) {
        var courseList = collection[major];
        courses[major] = courseList;

        for (const [key, value] of Object.entries(courseList)) {
            createCourseCheckbox(key);
        } 
    }
};

window.onload = function() {
    loadAllCourse();
    limitCheckBoxSelection(courseSelection.querySelectorAll("input"), 4);
};
</script>

